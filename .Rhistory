usethis::use_github()
usethis::use_git()
usethis::use_github()
usethis::git_default_branch_rename(from = "master", to = "main")
1 + 1
# tabela de frequência relativa
freq_rel <- table(pais_origem$pais_origem)/length(pais_origem$pais_origem) * 100
# carregando o arquivo csv no ambiente do R
pais_origem <- read.csv("freq_table.csv", sep = ";")
# visualizando o cabeçalho
head(pais_origem, 10)
# tabela de frequência absoluta
freq_abs <- table(pais_origem$pais_origem)
freq_abs
# tabela de frequência relativa
freq_rel <- table(pais_origem$pais_origem)/length(pais_origem$pais_origem) * 100
freq_rel
# tabela de frequência absoluta acumulada
freq_abs_cum <- cumsum(table(pais_origem$pais_origem))
freq_abs_cum
# tabela de frequência relativa acumulada
freq_rel_cum <- cumsum(table(pais_origem$pais_origem)/length(pais_origem$individuo) * 100)
freq_rel_cum
# tabela de frequência relativa acumulada
freq_rel_cum <- cumsum(table(pais_origem$pais_origem)/length(pais_origem$pais_origem) * 100)
freq_rel_cum
# criando uma única tablea de frequência
tabela_freq <- cbind(freq_abs, freq_rel, freq_abs_cum, freq_rel_cum)
tabela_freq
# Load library
library(h2o)
# start h2o cluster
invisible(h2o.init())
# convert data as h2o type
train_h = as.h2o(train)
# close h2o connection
h2o.shutdown(prompt = F)
?data
install.packages("RemixAutoML")
library(fpp3)
global_economy |>
filter(Code == "EGY") |>
autoplot(Exports) +
labs(y = "% of GDP", title = "Egyptian exports")
fit <- global_economy |>
filter(Code == "EGY") |>
model(ARIMA(Exports))
report(fit)
sqrt(8.046)
fit |> forecast(h=10) |>
autoplot(global_economy) +
labs(y = "% of GDP", title = "Egyptian exports")
global_economy |>
filter(Code == "EGY") |>
ACF(Exports) |>
autoplot()
global_economy |>
filter(Code == "EGY") |>
PACF(Exports) |>
autoplot()
fit2 <- global_economy |>
filter(Code == "EGY") |>
model(ARIMA(Exports ~ pdq(4,0,0)))
report(fit2)
View(fit)
class(fit)
View(fit[[2]][[1]])
library(fpp3)
global_economy |>
filter(Code == "CAF") |>
autoplot(Exports)
global_economy |>
filter(Code == "CAF") |>
autoplot(Exports) +
labs(title="Central African Republic exports",
y="% of GDP")
global_economy |>
filter(Code == "CAF") |>
gg_tsdisplay(difference(Exports), plot_type='partial')
caf_fit <- global_economy |>
filter(Code == "CAF") |>
model(arima210 = ARIMA(Exports ~ pdq(2,1,0)),
arima013 = ARIMA(Exports ~ pdq(0,1,3)),
stepwise = ARIMA(Exports),
search = ARIMA(Exports, stepwise=FALSE))
View(caf_fit)
View(caf_fit)
View(caf_fit)
caf_fit |> pivot_longer(!Country, names_to = "Model name",
values_to = "Orders")
View(caf_fit)
View(caf_fit[[2]][[1]])
glance(caf_fit) |> arrange(AICc) |> select(.model:BIC)
glance(caf_fit) |> arrange(AICc)
glance(caf_fit) |> arrange(AICc) |> select(.model:BIC)
caf_fit |>
select(search) |>
gg_tsresiduals()
augment(caf_fit) |>
filter(.model=='search') |>
features(.innov, ljung_box, lag = 10, dof = 3)
augment(caf_fit) |>
filter(.model=='stepwise') |>
features(.innov, ljung_box, lag = 10, dof = 3)
augment(caf_fit) |>
filter(.model=='stepwise') |>
features(.innov, ljung_box, lag = 10, dof = 4)
augment(caf_fit) |>
filter(.model=='arima210') |>
features(.innov, ljung_box, lag = 10, dof = 2)
augment(caf_fit) |>
filter(.model=='arima013') |>
features(.innov, ljung_box, lag = 10, dof = 3)
augment(caf_fit) |>
filter(.model=='search') |>
features(.innov, ljung_box, lag = 10, dof = 3)
caf_fit |>
forecast(h=5) |>
filter(.model=='search') |>
autoplot(global_economy)
caf_fit <- global_economy |>
filter(Code == "CAF") |>
model(arima210 = ARIMA(Exports ~ pdq(2,1,0)),
arima013 = ARIMA(Exports ~ pdq(0,1,3)),
stepwise = ARIMA(Exports),
search = ARIMA(Exports, stepwise=FALSE),
rw = RW(Exports))
caf_fit |> pivot_longer(!Country, names_to = "Model name",
values_to = "Orders")
glance(caf_fit) |> arrange(AICc) |> select(.model:BIC)
caf_fit |>
select(search) |>
gg_tsresiduals()
augment(caf_fit) |>
filter(.model=='search') |>
features(.innov, ljung_box, lag = 10, dof = 3)
caf_fit |>
forecast(h=5) |>
filter(.model=='rw') |>
autoplot(global_economy)
augment(caf_fit) |>
filter(.model=='rw') |>
features(.innov, ljung_box, lag = 10, dof = 3)
augment(caf_fit) |>
filter(.model=='rw') |>
features(.innov, ljung_box, lag = 10)
caf_fit <- global_economy |>
filter(Code == "CAF") |>
model(arima210 = ARIMA(Exports ~ pdq(2,1,0)),
arima013 = ARIMA(Exports ~ pdq(0,1,3)),
stepwise = ARIMA(Exports),
search = ARIMA(Exports, stepwise=FALSE),
rw = NAIVE(Exports))
caf_fit |> pivot_longer(!Country, names_to = "Model name",
values_to = "Orders")
glance(caf_fit) |> arrange(AICc) |> select(.model:BIC)
augment(caf_fit) |>
filter(.model=='rw') |>
features(.innov, ljung_box, lag = 10)
caf_fit |>
forecast(h=5) |>
filter(.model=='rw') |>
autoplot(global_economy)
caf_fit |> filter(.model == 'search') |> report()
View(caf_fit)
caf_fit |> filter(.model == 'search') |> report()
caf_fit |> filter(.model == 'rw') |> report()
caf_fit |> report()
caf_fit
caf_fit |> select(.model)
caf_fit |> select(search)
caf_fit |> select(search) |> report()
us_employment
leisure <- us_employment |>
filter(Title == "Leisure and Hospitality",
year(Month) > 2000) |>
mutate(Employed = Employed/1000) |>
select(Month, Employed)
autoplot(leisure, Employed) +
labs(title = "US employment: leisure and hospitality",
y="Number of people (millions)")
leisure |>
gg_tsdisplay(difference(Employed, 12),
plot_type='partial', lag=36) +
labs(title="Seasonally differenced", y="")
leisure |>
gg_tsdisplay(difference(Employed, 12) |> difference(),
plot_type='partial', lag=36) +
labs(title = "Double differenced", y="")
fit <- leisure |>
model(
arima012011 = ARIMA(Employed ~ pdq(0,1,2) + PDQ(0,1,1)),
arima210011 = ARIMA(Employed ~ pdq(2,1,0) + PDQ(0,1,1)),
auto = ARIMA(Employed, stepwise = FALSE, approx = FALSE)
)
fit |> pivot_longer(everything(), names_to = "Model name",
values_to = "Orders")
glance(fit) |> arrange(AICc) |> select(.model:BIC)
fit |> select(auto) |> gg_tsresiduals(lag=36)
augment(fit) |>
filter(.model == "auto") |>
features(.innov, ljung_box, lag=24, dof=4)
forecast(fit, h=36) |>
filter(.model=='auto') |>
autoplot(leisure) +
labs(title = "US employment: leisure and hospitality",
y="Number of people (millions)")
h02 <- PBS |>
filter(ATC2 == "H02") |>
summarise(Cost = sum(Cost)/1e6)
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month) |>
ggplot(aes(x = Month, y = value)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") +
labs(y="", title="Corticosteroid drug scripts (H02)")
h02
h02 |>
mutate(log(Cost))
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month)
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month) |>
ggplot(aes(x = Month, y = value))
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month) |>
ggplot(aes(x = Month, y = value)) +
geom_line()
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month) |>
ggplot(aes(x = Month, y = value)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
h02 |>
mutate(log(Cost)) |>
pivot_longer(-Month) |>
ggplot(aes(x = Month, y = value)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") +
labs(y="", title="Corticosteroid drug scripts (H02)")
h02 |> gg_tsdisplay(difference(log(Cost), 12),
plot_type='partial', lag_max = 24)
fit |> gg_tsresiduals(lag_max=36)
fit <- h02 |>
model(ARIMA(log(Cost) ~ 0 + pdq(3,0,1) + PDQ(0,1,2)))
fit |> gg_tsresiduals(lag_max=36)
augment(fit) |>
features(.innov, ljung_box, lag = 36, dof = 6)
0.0104*100
library(fpp3)
aus_economy <- global_economy |>
filter(Code == "AUS") |>
mutate(Population = Population/1e6)
aus_economy |>
slice(-n()) |>
stretch_tsibble(.init = 10) |>
model(
ETS(Population),
ARIMA(Population)
) |>
forecast(h = 1) |>
accuracy(aus_economy) |>
select(.model, RMSE:MAPE)
aus_economy |>
model(ETS(Population)) |>
forecast(h = "5 years") |>
autoplot(aus_economy |> filter(Year >= 2000)) +
labs(title = "Australian population",
y = "People (millions)")
cement <- aus_production |>
select(Cement) |>
filter_index("1988 Q1" ~ .)
train <- cement |> filter_index(. ~ "2007 Q4")
fit_arima <- train |> model(ARIMA(Cement))
report(fit_arima)
fit_arima |> gg_tsresiduals(lag_max = 16)
augment(fit_arima) |>
features(.innov, ljung_box, lag = 16, dof = 5)
fit_ets <- train |> model(ETS(Cement))
report(fit_ets)
fit_ets |>
gg_tsresiduals(lag_max = 16)
augment(fit_ets) |>
features(.innov, ljung_box, lag = 16)
bind_rows(
fit_arima |> accuracy(),
fit_ets |> accuracy(),
fit_arima |> forecast(h = 10) |> accuracy(cement),
fit_ets |> forecast(h = 10) |> accuracy(cement)
) |>
select(-ME, -MPE, -ACF1)
cement |>
model(ARIMA(Cement)) |>
forecast(h="3 years") |>
autoplot(cement) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
library(urca)
library(forecast)
library(TSA)
data("AirPassengers")
force(AirPassengers)
layout(1:2)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
layout(1:2)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
pacf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48)
fit.air <- Arima(AirPassengers, order = c(1,1,1), seasonal = c(1,1,1),
method = "ML", lambda = 0)
summary(fit.air)
t.test <- function(modelo_arima){
# estat´ıstica t
coef <- modelo_arima$coef
se <- sqrt(diag(modelo_arima$var.coef))
t <- abs(coef/se)
# Teste t
ok <- t > qt(0.975, length(modelo_arima$x) -
sum(modelo_arima$arma[c(1,2,3,4,6,7)]))
resul <- data.frame(Coef = coef, sd = se, t = t, rej_H0 = ok)
return(resul)
}
t.test(fit.air)
fit.air$coef
fit.air$var.coef
modelo_arima$var.coef
fit.air$arma
t.test(fit.air)
fit.air <- Arima(AirPassengers, order = c(0,1,1), seasonal = c(0,1,1),
method = "ML", lambda = 0)
summary(fit.air)
t.test(fit.air)
diag <- tsdiag(fit.air, gof.lag = 20)
diag
tsdiag(fit.air, gof.lag = 20)
diag <- tsdiag(fit.air, gof.lag = 20)
Box.test(x = fit.air$residuals, lag = 24,
type = "Ljung-Box", fitdf = 2)
library(FinTS)
ArchTest(fit.air$residuals,lags = 12)
library(normtest)
install.packages("normtest")
library(normtest)
prev <- forecast(object = fit.air, h=12, level = 0.95)
plot(prev)
layout(null)
layout(NULL)
layout(1:1)
plot(prev)
accuracy(fit.air)
data.frame(prev)
AirPassengers
data.frame(prev)
