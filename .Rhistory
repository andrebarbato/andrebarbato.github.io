ARIMA(Population)
) |>
forecast(h = 1) |>
accuracy(aus_economy) |>
select(.model, RMSE:MAPE)
aus_economy |>
model(ETS(Population)) |>
forecast(h = "5 years") |>
autoplot(aus_economy |> filter(Year >= 2000)) +
labs(title = "Australian population",
y = "People (millions)")
cement <- aus_production |>
select(Cement) |>
filter_index("1988 Q1" ~ .)
train <- cement |> filter_index(. ~ "2007 Q4")
fit_arima <- train |> model(ARIMA(Cement))
report(fit_arima)
fit_arima |> gg_tsresiduals(lag_max = 16)
augment(fit_arima) |>
features(.innov, ljung_box, lag = 16, dof = 5)
fit_ets <- train |> model(ETS(Cement))
report(fit_ets)
fit_ets |>
gg_tsresiduals(lag_max = 16)
augment(fit_ets) |>
features(.innov, ljung_box, lag = 16)
bind_rows(
fit_arima |> accuracy(),
fit_ets |> accuracy(),
fit_arima |> forecast(h = 10) |> accuracy(cement),
fit_ets |> forecast(h = 10) |> accuracy(cement)
) |>
select(-ME, -MPE, -ACF1)
cement |>
model(ARIMA(Cement)) |>
forecast(h="3 years") |>
autoplot(cement) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
library(urca)
library(forecast)
library(TSA)
data("AirPassengers")
force(AirPassengers)
layout(1:2)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
layout(1:2)
acf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48, drop.lag.0 = T)
pacf(diff(diff(log(AirPassengers), lag = 1, differences = 1),
lag = 12, differences = 1), lag.max = 48)
fit.air <- Arima(AirPassengers, order = c(1,1,1), seasonal = c(1,1,1),
method = "ML", lambda = 0)
summary(fit.air)
t.test <- function(modelo_arima){
# estat´ıstica t
coef <- modelo_arima$coef
se <- sqrt(diag(modelo_arima$var.coef))
t <- abs(coef/se)
# Teste t
ok <- t > qt(0.975, length(modelo_arima$x) -
sum(modelo_arima$arma[c(1,2,3,4,6,7)]))
resul <- data.frame(Coef = coef, sd = se, t = t, rej_H0 = ok)
return(resul)
}
t.test(fit.air)
fit.air$coef
fit.air$var.coef
modelo_arima$var.coef
fit.air$arma
t.test(fit.air)
fit.air <- Arima(AirPassengers, order = c(0,1,1), seasonal = c(0,1,1),
method = "ML", lambda = 0)
summary(fit.air)
t.test(fit.air)
diag <- tsdiag(fit.air, gof.lag = 20)
diag
tsdiag(fit.air, gof.lag = 20)
diag <- tsdiag(fit.air, gof.lag = 20)
Box.test(x = fit.air$residuals, lag = 24,
type = "Ljung-Box", fitdf = 2)
library(FinTS)
ArchTest(fit.air$residuals,lags = 12)
library(normtest)
install.packages("normtest")
library(normtest)
prev <- forecast(object = fit.air, h=12, level = 0.95)
plot(prev)
layout(null)
layout(NULL)
layout(1:1)
plot(prev)
accuracy(fit.air)
data.frame(prev)
AirPassengers
data.frame(prev)
usethis::create_from_github("https://github.com/andrebarbato/andrebarbato.github.io.git")
quit()
numeros <- 1:100
numeros <- 1:100
for (numero in numeros) {
if numero %% 2 == 0 and numero %% 4 == 0 {
for (numero in numeros) {
if(numero %% 2 == 0 and numero %% 4 == 0){
for (numero in numeros) {
if(numero %% 2 == 0 & numero %% 4 == 0){
print(numero)
}
}
for (numero in numeros) {
if(numero % 2 == 0 & numero % 4 == 0){
print(numero)
}
}
for (numero in numeros) {
if(numero %% 2 == 0 & numero %% 4 == 0){
print(numero)
}
}
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
bubble_sort <- function(arr){
}
lista[1]
lista[2]
lista[4]
length(arr)
length(lista)
sort(lista)
lista[]
lista[1]
lista[7]
lista[7],[8]
lista[7], lista[8]
lista[7], lista[8]
lista[7], lista[8]
lista[1],lista[2] <- 66
lista[c(3,5)]
lista[c(3,5)] <- 66
lista[c(3,5)]
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
lista[c(3,5)]
lista[c(3,5)] <- lista[c(5,3)]
<- lista[c(5,3)]
lista[c(3,5)]
bubble_sort <- function(arr){
for (i in length(arr)) {
if (arr[i] > arr[i+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in length(arr)) {
if (arr[i] > arr[i+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
return(arr)
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in length(arr)) {
if (arr[i] > arr[i+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
return(arr)
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in length(arr)) {
for (j in length(arr)-1) {
if (arr[i] > arr[i+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
return(arr)
}
print(bubble_sort(lista))
lista[1]
lista[1+1]
lista[1+3]
range(1,5)
range(1:5)
1:5
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)) {
if (arr[i] > arr[i+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
return(arr)
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in (1:length(arr))) {
for (j in (1:length-1)) {
if (arr[j] > arr[j+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
return(arr)
}
print(bubble_sort(lista))
length(lista)
1:length(lista)
for(i in 1:length(lista)) {
print(i)
}
bubble_sort <- function(arr){
for (i in (1:length(arr))) {
for (j in (1:length-1)) {
if (arr[j] > arr[j+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
arr
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length-1) {
if (arr[j] > arr[j+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
arr
}
print(bubble_sort(lista))
}
print(bubble_sort(lista))
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:(length(arr)-1)) {
if (arr[j] > arr[j+1]) {
arr[c(i,i+1)] <- arr[c(i+1,i)]
}
}
}
arr
}
print(bubble_sort(lista))
for(i in 1:length(lista)) {
print(i)
}
i <- 1
lista[i] < lista[i+1]
lista[i] < lista[i+1]
lista[i] > lista[i+1]
i <- 2
lista[i] > lista[i+1]
i <- 3
lista[i] > lista[i+1]
if(lista[i] > lista[i+1]) {
TRUE
}
i <- 1
if(lista[i] > lista[i+1]) {
TRUE
}
j+1
lista[i, i+1]
lista[c(i, i+1)]
if(lista[i] > lista[i+1]) {
TRUE
}
length(lista)
length(lista)-1
1:length(lista)-1
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
arr
}
print(bubble_sort(lista))
arr[j] > arr[j+1]
j <- 1
arr  -lista
arr  <- lista
arr[j] > arr[j+1]
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
arr
}
print(bubble_sort(lista))
arr[j] > arr[j+1]
j <- 2
arr[j] > arr[j+1]
j <- 3
arr[j] > arr[j+1]
0
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
arr
}
print(bubble_sort(lista))
arr[j] > arr[j+1]
i <- 1
if(lista[i] > lista[i+1]) {
TRUE
}
i <- 3
if(lista[i] > lista[i+1]) {
TRUE
}
print(bubble_sort(lista))
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
arr
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
arr
}
print(bubble_sort(lista))
bubble_sort(lista)
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
}
}
arr
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
}
}
}
arr
}
print(bubble_sort(lista))
lista
bubble_sort(lista)
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
}
}
}
return(arr)
}
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:length(arr)-1) {
if (arr[j] > arr[j+1]) {
}
}
}
return(arr)
}
print(bubble_sort(lista))
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
source(teste.R)
source("teste.R")
getwd()
setwd("C:/Users/Andre/Desktop")
source("teste.R")
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
print(bubble_sort(lista))
print(bubble_sort(lista))
source("teste.R")
lista <- c(6,7,8,3,10,19,4,1,0,61,30,16,17,82,29,34,43,21,11,39,56,67,12)
print(bubble_sort(lista))
debug(bubble_sort)
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:(length(arr)-1)) {
if (arr[j] > arr[j+1]) {
}
}
}
return(arr)
}
(bubble_sort)
print(bubble_sort(lista))
bubble_sort <- function(arr){
for (i in 1:length(arr)) {
for (j in 1:(length(arr)-1)) {
if (arr[j] > arr[j+1]) {
arr[c(j,j+1)] <- arr[c(j+1,j)]
}
}
}
return(arr)
}
print(bubble_sort(lista))
debug(bubble_sort)
print(bubble_sort(lista))
arr
arr
arr
arr
arr
lista
bubble_sort()
bubble_sort()
undebug(bubble_sort)
bubble_sort()
sqrt(31)
sqrt(-31)
sqrt(31,45)
sqrt(31.45)
5.60803*5.60803
precisao <- 6
fator <- 100
x <- 31
x <- x * precisao * fator
x <- 31
x <- x * (precisao ^ fator)
precisao ^ fator
x <- 31
x <- x * (precisao ** fator)
100 * 100 * 100 * 100 * 100 * 100
precisao ** fator
fator
precisao
precisao ** fator
precisao ^ fator
precisao <- 2
x <- 31
x <- x * (fator ^ precisao)
31 / 2
31 / 3
fator ^ precisao
target <- x * (fator ^ precisao)
precisao <- 2
fator <- 100
target <- x * (fator ^ precisao)
x <- 31
fator ^ precisao
* (fator ^ precisao)
x * (fator ^ precisao)
target <- x * (fator ^ precisao)
for (i in 1:9) {
if(i^2>x){
y <- i - 1
}
}
y <- i - 1
for (i in 9:1) {
if(i^2<x){
y <- i
break
}
}
z <- y * 2
resto <- x - y^2
x
y^2
resto <- x - (y^2)
length(31)
x <- 3829849
for (i in 9:1) {
if(i^2<x){
y <- i
break
}
}
x <- 3829849
x_string <- as.character(x)
x_size <- length(x_string)
x_size <- nchar(x_string)
